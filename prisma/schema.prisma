generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          USER_ROLE @default(USER)
    photos        Photo[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum USER_ROLE {
    ADMIN
    USER
}

model Photo {
    id             String   @id @default(cuid())
    editedId       String   @unique
    restoredId     String?  @unique
    bgRemovedId    String?  @unique
    inputImage     String
    editedImage    String
    restoredImage  String?
    bgRemovedImage String?
    prompt         String
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
}
